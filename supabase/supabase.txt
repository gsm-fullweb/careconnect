
-- Create profiles table to store user profile information
CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  phone TEXT,
  avatar_url TEXT,
  user_role TEXT DEFAULT 'user' CHECK (user_role IN ('user', 'admin')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create RLS policies for profiles
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Profile policies
CREATE POLICY "Users can view their own profile" 
  ON public.profiles 
  FOR SELECT 
  USING (auth.uid() = id);

CREATE POLICY "Users can update their own profile" 
  ON public.profiles 
  FOR UPDATE
  USING (auth.uid() = id);

-- Blog posts table
CREATE TABLE public.blog_posts (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT NOT NULL,
  slug TEXT NOT NULL UNIQUE,
  content TEXT NOT NULL,
  excerpt TEXT,
  cover_image TEXT,
  author_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
  published BOOLEAN DEFAULT false,
  published_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- RLS for blog posts
ALTER TABLE public.blog_posts ENABLE ROW LEVEL SECURITY;

-- Blog post policies
CREATE POLICY "Published posts are viewable by everyone" 
  ON public.blog_posts 
  FOR SELECT 
  USING (published = true);

CREATE POLICY "Users with admin role can manage all posts" 
  ON public.blog_posts 
  FOR ALL 
  USING (EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid() AND user_role = 'admin'
  ));

-- Testimonials table
CREATE TABLE public.testimonials (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  role TEXT,
  content TEXT NOT NULL,
  avatar_url TEXT,
  rating INTEGER CHECK (rating >= 1 AND rating <= 5),
  published BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- RLS for testimonials
ALTER TABLE public.testimonials ENABLE ROW LEVEL SECURITY;

-- Testimonial policies
CREATE POLICY "Published testimonials are viewable by everyone" 
  ON public.testimonials 
  FOR SELECT 
  USING (published = true);

CREATE POLICY "Users with admin role can manage all testimonials" 
  ON public.testimonials 
  FOR ALL 
  USING (EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid() AND user_role = 'admin'
  ));

-- Partners table
CREATE TABLE public.partners (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  logo_url TEXT,
  website_url TEXT,
  description TEXT,
  published BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- RLS for partners
ALTER TABLE public.partners ENABLE ROW LEVEL SECURITY;

-- Partner policies
CREATE POLICY "Published partners are viewable by everyone" 
  ON public.partners 
  FOR SELECT 
  USING (published = true);

CREATE POLICY "Users with admin role can manage all partners" 
  ON public.partners 
  FOR ALL 
  USING (EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = auth.uid() AND user_role = 'admin'
  ));

-- Function to handle new user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, first_name, last_name, email, avatar_url)
  VALUES (
    NEW.id,
    NEW.raw_user_meta_data->>'first_name',
    NEW.raw_user_meta_data->>'last_name',
    NEW.email,
    NEW.raw_user_meta_data->>'avatar_url'
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to automatically create profile on signup
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
-- Create content items table
CREATE TABLE public.content_items (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT NOT NULL,
  type TEXT NOT NULL CHECK (type IN ('Text', 'Image')),
  content JSONB NOT NULL,
  status TEXT NOT NULL CHECK (status IN ('Published', 'Draft')),
  last_updated TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Enable RLS
ALTER TABLE public.content_items ENABLE ROW LEVEL SECURITY;

-- Allow all authenticated users to view content
CREATE POLICY "Content items are viewable by authenticated users" 
  ON public.content_items 
  FOR SELECT 
  USING ((SELECT auth.uid()) IS NOT NULL);

-- Only users with admin role can manage content items
CREATE POLICY "Only admins can insert content items" 
  ON public.content_items 
  FOR INSERT
  WITH CHECK (EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = (SELECT auth.uid()) AND user_role = 'admin'
  ));

CREATE POLICY "Only admins can update content items" 
  ON public.content_items 
  FOR UPDATE
  WITH CHECK (EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = (SELECT auth.uid()) AND user_role = 'admin'
  ));

CREATE POLICY "Only admins can delete content items" 
  ON public.content_items 
  FOR DELETE
  USING (EXISTS (
    SELECT 1 FROM public.profiles
    WHERE id = (SELECT auth.uid()) AND user_role = 'admin'
  ));

-- Create a storage bucket for content images if it doesn't exist
INSERT INTO storage.buckets (id, name, public)
VALUES ('public', 'Public Storage Bucket', true)
ON CONFLICT (id) DO NOTHING;

-- Set up RLS policy to allow public access to view the content
CREATE POLICY "Public Access" ON storage.objects FOR SELECT 
USING (bucket_id = 'public');

-- Allow authenticated users to insert into public bucket
CREATE POLICY "Authenticated users can upload" ON storage.objects
  FOR INSERT WITH CHECK (
    bucket_id = 'public' AND
    (SELECT auth.uid()) IS NOT NULL
  );

-- Allow users to update their own objects
CREATE POLICY "Users can update own objects" ON storage.objects
  FOR UPDATE USING (
    bucket_id = 'public' AND
    (SELECT auth.uid()) = owner
  );

-- Allow users to delete their own objects
CREATE POLICY "Users can delete own objects" ON storage.objects
  FOR DELETE USING (
    bucket_id = 'public' AND
    (SELECT auth.uid()) = owner
  );